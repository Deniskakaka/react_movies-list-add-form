{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","validUrl","validimdbUrl","setValidUrl","setValidimdbUrl","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","pattern","renderError","useMemo","htmlFor","classNames","type","placeholder","event","target","onBlur","match","NewMovie","onAdd","count","setCount","setDesription","setTitle","setImgUrl","setImdbUrl","setImdbId","onSubmit","preventDefault","disabled","App","moviesFromServer","listMovie","setListMovie","addMovieInList","useCallback","ReactDOM","render","document","getElementById"],"mappings":"mSAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBCSpC,IAAMC,EAA6B,SAAC,GAUpC,IATLC,EASI,EATJA,KACAC,EAQI,EARJA,MAQI,IAPJC,aAOI,MAPIF,EAOJ,MANJG,gBAMI,SALJC,EAKI,EALJA,SACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,gBAEI,IADJC,gBACI,MADO,WAAQ,EACf,EAEJ,EAAaC,oBAAS,2BAAST,EAAT,YAffU,KAAKC,SAASC,WAAWC,MAAM,GAehB,IAAfC,EAAP,oBAGA,EAA6BL,oBAAS,GAAtC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,GAAWZ,IAAaF,EAEnCiB,EAAU,uKAEVC,EAAcC,mBAAQ,WAC1B,MAAa,WAATpB,GAA8B,YAATA,EAChBI,GAAYC,EAGdY,CACR,GAAE,CAACb,EAAUC,EAAcY,IA0B5B,OACE,sBAAK9B,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQkC,QAASP,EAAlC,SACGZ,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACE2B,GAAIA,EACJ,0BAAkBd,GAClBb,UAAWmC,IAAW,QAAS,CAC7B,YAAaH,IAEfI,KAAK,OACLC,YAAW,gBAAWtB,GACtBD,MAAOA,EACPO,SA5BgB,SAACiB,GACnBnB,GACFA,GAAY,GAGVC,GACFA,GAAgB,GAGlBC,EAASiB,EAAMC,OAAOzB,MACvB,EAmBO0B,OAzCc,YACf1B,EAAM2B,MAAMV,IAAYZ,GAC3BA,GAAY,IAGTL,EAAM2B,MAAMV,IAAYX,GAC3BA,GAAgB,GAGlBS,GAAU,EACX,MAmCIG,GACC,mBAAGhC,UAAU,iBAAb,mBAAkCe,EAAlC,oBAIP,ECzFY2B,EAA2B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAGzC,EAA0BrB,mBAAS,GAAnC,mBAAOsB,EAAP,KAAcC,EAAd,KACA,EAAqCvB,mBAAS,IAA9C,mBAAOjB,EAAP,KAAoByC,EAApB,KACA,EAA0BxB,mBAAS,IAAnC,mBAAOlB,EAAP,KAAc2C,EAAd,KACA,EAA4BzB,mBAAS,IAArC,mBAAOpB,EAAP,KAAe8C,EAAf,KACA,EAA8B1B,mBAAS,IAAvC,mBAAOf,EAAP,KAAgB0C,EAAhB,KACA,EAA4B3B,mBAAS,IAArC,mBAAOX,EAAP,KAAeuC,EAAf,KACA,EAAgC5B,oBAAS,GAAzC,mBAAOL,EAAP,KAAiBE,EAAjB,KACA,EAAwCG,oBAAS,GAAjD,mBAAOJ,EAAP,KAAqBE,EAArB,KAmBA,OACE,uBACEpB,UAAU,WAEVmD,SArBoB,SAACb,GACvBA,EAAMc,iBACNT,EAAM,CACJvC,QACAC,cACAH,SACAK,UACAI,WAEFmC,EAAc,IACdC,EAAS,IACTC,EAAU,IACVC,EAAW,IACXC,EAAU,IACVL,EAASD,EAAQ,EAClB,EAGC,UAKE,oBAAI5C,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOV,EACPiB,SAAU0B,EACV/B,UAAQ,IAGV,cAAC,EAAD,CACEH,KAAK,cACLE,MAAM,cACND,MAAOT,EACPgB,SAAUyB,IAGZ,cAAC,EAAD,CACEjC,KAAK,SACLE,MAAM,YACND,MAAOZ,EACPmB,SAAU2B,EACVhC,UAAQ,EACRC,SAAUA,EACVE,YAAaA,IAGf,cAAC,EAAD,CACEN,KAAK,UACLE,MAAM,WACND,MAAOP,EACPc,SAAU4B,EACVjC,UAAQ,EACRE,aAAcA,EACdE,gBAAiBA,IAGnB,cAAC,EAAD,CACEP,KAAK,SACLE,MAAM,UACND,MAAOH,EACPU,SAAU6B,EACVlC,UAAQ,IAGV,qBAAKhB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACEoC,KAAK,SACL,UAAQ,gBACRpC,UAAU,iBACVqD,UACGjD,IACGF,IACAK,IACAI,GACDO,GACAD,EAVP,uBAlDC2B,EAqEV,E,OCtGYU,EAAM,WACjB,MAAkChC,mBAASiC,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAiBC,uBAAY,SAAC5D,GAClC0D,EAAa,GAAD,mBAAKD,GAAL,CAAgBzD,IAC7B,GAAE,IAEH,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQ+C,MAEtB,qBAAKxD,UAAU,UAAf,SACE,cAAC,EAAD,CAAU2C,MAAOe,QAIxB,ECpBDE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.68eff47d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useMemo, useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  validUrl?: boolean,\n  validimdbUrl?: boolean,\n  setValidUrl?: (val: boolean) => void,\n  setValidimdbUrl?: (val:boolean) => void,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  validUrl,\n  validimdbUrl,\n  setValidUrl,\n  setValidimdbUrl,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const renderError = useMemo(() => {\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      return validUrl || validimdbUrl;\n    }\n\n    return hasError;\n  }, [validUrl, validimdbUrl, hasError]);\n\n  const onBlurHandler = () => {\n    if (!value.match(pattern) && setValidUrl) {\n      setValidUrl(true);\n    }\n\n    if (!value.match(pattern) && setValidimdbUrl) {\n      setValidimdbUrl(true);\n    }\n\n    setToched(true);\n  };\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (setValidUrl) {\n      setValidUrl(false);\n    }\n\n    if (setValidimdbUrl) {\n      setValidimdbUrl(false);\n    }\n\n    onChange(event.target.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': renderError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChangeHandler}\n          onBlur={onBlurHandler}\n        />\n      </div>\n\n      {renderError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie:Movie) => void\n};\n\nexport const NewMovie:React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [description, setDesription] = useState('');\n  const [title, setTitle] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [validUrl, setValidUrl] = useState(false);\n  const [validimdbUrl, setValidimdbUrl] = useState(false);\n\n  const onSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n    setDesription('');\n    setTitle('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={onSubmitHandler}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDesription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n        validUrl={validUrl}\n        setValidUrl={setValidUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n        validimdbUrl={validimdbUrl}\n        setValidimdbUrl={setValidimdbUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={\n              !title\n              || !imgUrl\n              || !imdbUrl\n              || !imdbId\n              || validimdbUrl\n              || validUrl\n            }\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useCallback, useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [listMovie, setListMovie] = useState(moviesFromServer);\n\n  const addMovieInList = useCallback((movie: Movie) => {\n    setListMovie([...listMovie, movie]);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={listMovie} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovieInList} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}